# -*- coding: utf-8 -*-
"""movies_reviews_etl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p52WQO6HVMGJIKPB_Hlf1FjmfySem0xA
"""

from pyspark.ml.feature import Tokenizer, RegexTokenizer
from pyspark.sql.functions import col, udf
from pyspark.sql import SparkSession
from pyspark.sql import functions as f
from pyspark.sql.functions import *
from pyspark.sql.types import StringType, IntegerType
from pyspark import SparkContext
from pyspark import SparkConf
from pyspark.ml.feature import StopWordsRemover
from pyspark.sql.functions import col, concat_ws
from pyspark.sql import functions as F
import pyspark
from functools import reduce

import pandas as pd

raw_csv_path = "gs://capable-hangout-357804-input/movie_review.csv"
processed_features_output_path = "gs://stg_files_wz/movies" 

def tokenizer_movie(dataframe_file):
  tokenizer = Tokenizer(inputCol="review_str", outputCol="review_token")

  tokenized = tokenizer.transform(dataframe_file)

  return tokenized

def stop_words_remover(dataframe_file):
  remover = StopWordsRemover(inputCol="review_token", outputCol="review_token_sw")
  return remover.transform(dataframe_file)

def positive_review(dataframe_file):
  df_concat = dataframe_file.withColumn("review_token_sw",
   concat_ws(",",col("review_token_sw")))

  positive_review_df = df_concat.withColumn("positive_review", expr("CASE WHEN review_token_sw like '%good%' THEN True " + 
                "ELSE False END"))
  return positive_review_df

def insert_date(dataframe_file):
  date_df = dataframe_file.withColumn('insert_date', F.current_timestamp())
  return date_df

def boolean_to_integer_drop_columns(dataframe_file):
  cols = ['positive_review']
  df_int = reduce(lambda dataframe_file, c: dataframe_file.withColumn(c, F.when(dataframe_file[c] == 'false', 0).otherwise(1)), cols, dataframe_file)
  df_last_v = df_int.drop("review_str","review_token","review_token_sw","insert_date")
  return df_last_v

def rename_columns_switch(dataframe_file):
  final_df = dataframe_file.withColumnRenamed("cid","user_id") \
  .withColumnRenamed("id_review","review_id")
  rearrange_df = final_df.select("user_id","positive_review","review_id")
  return rearrange_df

spark = SparkSession \
    .builder \
    .appName("Movies ETL") \
    .getOrCreate()

df = (spark
    .read
    .option("header", "true")
    .option("inferSchema", "true")
    .csv(raw_csv_path))

tokenized_df = tokenizer_movie(df)

stop_words_remover_df = stop_words_remover(tokenized_df)

positive_review_df = positive_review(stop_words_remover_df)

insert_date_df = insert_date(positive_review_df)

boolean_to_integer_drop_columns_df = boolean_to_integer_drop_columns(insert_date_df)

rename_columns_switch_df = rename_columns_switch(boolean_to_integer_drop_columns_df)
rename_columns_switch_df.show(10)

rename_columns_switch_df.write.mode("overwrite").parquet(processed_features_output_path)